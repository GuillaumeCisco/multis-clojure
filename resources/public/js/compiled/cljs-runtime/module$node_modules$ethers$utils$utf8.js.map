{
"version":3,
"file":"module$node_modules$ethers$utils$utf8.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/ethers/utils/utf8.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ethers$utils$utf8\"] = function(global,require,module,exports) {\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bytes_1 = require(\"./bytes\");\nvar UnicodeNormalizationForm;\n(function (UnicodeNormalizationForm) {\n    UnicodeNormalizationForm[\"current\"] = \"\";\n    UnicodeNormalizationForm[\"NFC\"] = \"NFC\";\n    UnicodeNormalizationForm[\"NFD\"] = \"NFD\";\n    UnicodeNormalizationForm[\"NFKC\"] = \"NFKC\";\n    UnicodeNormalizationForm[\"NFKD\"] = \"NFKD\";\n})(UnicodeNormalizationForm = exports.UnicodeNormalizationForm || (exports.UnicodeNormalizationForm = {}));\n;\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\nfunction toUtf8Bytes(str, form) {\n    if (form === void 0) { form = UnicodeNormalizationForm.current; }\n    if (form != UnicodeNormalizationForm.current) {\n        str = str.normalize(form);\n    }\n    var result = [];\n    var offset = 0;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charCodeAt(i);\n        if (c < 128) {\n            result[offset++] = c;\n        }\n        else if (c < 2048) {\n            result[offset++] = (c >> 6) | 192;\n            result[offset++] = (c & 63) | 128;\n        }\n        else if (((c & 0xFC00) == 0xD800) && (i + 1) < str.length && ((str.charCodeAt(i + 1) & 0xFC00) == 0xDC00)) {\n            // Surrogate Pair\n            c = 0x10000 + ((c & 0x03FF) << 10) + (str.charCodeAt(++i) & 0x03FF);\n            result[offset++] = (c >> 18) | 240;\n            result[offset++] = ((c >> 12) & 63) | 128;\n            result[offset++] = ((c >> 6) & 63) | 128;\n            result[offset++] = (c & 63) | 128;\n        }\n        else {\n            result[offset++] = (c >> 12) | 224;\n            result[offset++] = ((c >> 6) & 63) | 128;\n            result[offset++] = (c & 63) | 128;\n        }\n    }\n    return bytes_1.arrayify(result);\n}\nexports.toUtf8Bytes = toUtf8Bytes;\n;\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\nfunction toUtf8String(bytes) {\n    bytes = bytes_1.arrayify(bytes);\n    var result = '';\n    var i = 0;\n    // Invalid bytes are ignored\n    while (i < bytes.length) {\n        var c = bytes[i++];\n        if (c >> 7 == 0) {\n            // 0xxx xxxx\n            result += String.fromCharCode(c);\n            continue;\n        }\n        // Invalid starting byte\n        if (c >> 6 == 0x02) {\n            continue;\n        }\n        // Multibyte; how many bytes left for thus character?\n        var extraLength = null;\n        if (c >> 5 == 0x06) {\n            extraLength = 1;\n        }\n        else if (c >> 4 == 0x0e) {\n            extraLength = 2;\n        }\n        else if (c >> 3 == 0x1e) {\n            extraLength = 3;\n        }\n        else if (c >> 2 == 0x3e) {\n            extraLength = 4;\n        }\n        else if (c >> 1 == 0x7e) {\n            extraLength = 5;\n        }\n        else {\n            continue;\n        }\n        // Do we have enough bytes in our data?\n        if (i + extraLength > bytes.length) {\n            // If there is an invalid unprocessed byte, try to continue\n            for (; i < bytes.length; i++) {\n                if (bytes[i] >> 6 != 0x02) {\n                    break;\n                }\n            }\n            if (i != bytes.length)\n                continue;\n            // All leftover bytes are valid.\n            return result;\n        }\n        // Remove the UTF-8 prefix from the char (res)\n        var res = c & ((1 << (8 - extraLength - 1)) - 1);\n        var count;\n        for (count = 0; count < extraLength; count++) {\n            var nextChar = bytes[i++];\n            // Is the char valid multibyte part?\n            if (nextChar >> 6 != 0x02) {\n                break;\n            }\n            ;\n            res = (res << 6) | (nextChar & 0x3f);\n        }\n        if (count != extraLength) {\n            i--;\n            continue;\n        }\n        if (res <= 0xffff) {\n            result += String.fromCharCode(res);\n            continue;\n        }\n        res -= 0x10000;\n        result += String.fromCharCode(((res >> 10) & 0x3ff) + 0xd800, (res & 0x3ff) + 0xdc00);\n    }\n    return result;\n}\nexports.toUtf8String = toUtf8String;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","bytes_1","UnicodeNormalizationForm","toUtf8Bytes","str","form","current","normalize","result","offset","i","length","c","charCodeAt","arrayify","toUtf8String","bytes","String","fromCharCode","extraLength","res","count","nextChar"]
}
