{"version":3,"sources":["cljs_web3/personal.cljs"],"mappings":"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","names":["cljs-web3.personal/get-prs","web3","cljs-web3.personal/list-accounts","cljs_web3.utils.prop_or_clb_fn.cljs$core$IFn$_invoke$arity$variadic","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","cljs-web3.personal/lock-account","seq41704","G__41705","cljs.core/first","cljs.core/next","self__4776__auto__","args","cljs_web3.utils.js_apply.cljs$core$IFn$_invoke$arity$3","cljs-web3.personal/new-account","seq41717","G__41718","cljs-web3.personal/unlock-account","seq41728","G__41729","cljs-web3.personal/ec-recover","seq41743","G__41744","cljs-web3.personal/import-raw-key","seq41754","G__41755","cljs-web3.personal/send-transaction","seq41781","G__41782","cljs-web3.personal/sign","seq41791","G__41792"],"sourcesContent":["(ns cljs-web3.personal\n  \"The web3-eth-personal package allows you to interact with the Ethereum node\u2019s\n  accounts.\"\n  (:require [cljs-web3.utils :as u :refer [js-apply]]))\n\n\n(defn get-prs\n  \"Get the web3-eth-personal package.\n\n  Parameter:\n  web3 - web3 instance\"\n  [web3]\n  (aget web3 \"personal\"))\n\n\n(def list-accounts\n  \"List accounts available.\n\n  Parameter:\n  web3 - web3 instance\n\n  Returns all the Ethereum account addresses of all keys in the key store.\n\n  Example:\n  user> `(list-accounts web3-instance)`\n  [\\\"0x5e97870f263700f46aa00d967821199b9bc5a120\\\",\n   \\\"0x3d80b31a78c30fc628f20b2c89d7ddbf6e53cedc\\\"]\"\n  (u/prop-or-clb-fn \"personal\" \"listAccounts\"))\n\n\n(defn lock-account\n  \"Removes the private key with given address from memory. The account can no\n  longer be used to send transactions.\n\n  Parameters:\n  web3    - web3 instance\n  address - address to lock\"\n  [web3 & args]\n  (js-apply (get-prs web3) \"lockAccount\" args))\n\n\n(defn new-account\n  \"Creates a new account.\n\n  Note: Never call this function over a unsecured Websocket or HTTP provider, as\n  your password will be send in plain text!\n\n  Parameters:\n  web3 - web3 instance\n  password - String: The password to encrypt this account with.\n\n  Returns:\n  Promise returns Boolean: true if the account was created, otherwise\n  false.\"\n  [web3 & args]\n  (js-apply (get-prs web3) \"newAccount\" args))\n\n\n(defn unlock-account\n  \"Unlocks the given account for duration seconds.\n\n  Parameters:\n  web3       - web3 instance\n  address    - address to unlock\n  passphrase - passphrase\n  duration   - time to unlock for in seconds, 0 for indefinitely\n  callback   - callback with error and result parameters\n\n  Returns boolean as to whether the account was successfully unlocked.\n\n  Example:\n  user> `(web3-personal/unlock-account web3-instance\n                                   account\n                                   \\\"password\\\"\n                                   indefinitely\n                                   callback)`\"\n  [web3 & args]\n  (js-apply (get-prs web3) \"unlockAccount\" args))\n\n\n(defn ec-recover\n  \"Recovers the Ethereum address which was used to sign the given data.\n\n  Parameters:\n  web3 - web3 instance\n  signature - String|Object: Either the encoded signature, the v, r, s values as\n                             separate parameters, or an object with the following\n                             values:\n      messageHash - String: The hash of the given message.\n      r - String: First 32 bytes of the signature\n      s - String: Next 32 bytes of the signature\n      v - String: Recovery value + 27\n\n  Returns the Ethereum address used to sign this data.\"\n  [web3 & args]\n  (js-apply (get-prs web3) \"ecRecover\" args))\n\n\n(defn import-raw-key\n  \"Imports the given unencrypted private key (hex string) into the key store,\n  encrypting it with the passphrase.\n\n  Parameters:\n  web3       - web3 instance\n  keydata    - hex string representing the unencrypted private key\n  passphrase - passphrase\n  callback   - callback with error and result as parameters\n\n  Returns the address of the new account.\"\n  [web3 & args]\n  (js-apply (get-prs web3) \"importRawKey\" args))\n\n\n(defn send-transaction\n  \"Validate the given passphrase and submit transaction.\n\n  Parameters:\n  web3        - web3 instance\n  transaction - The same argument as for `(web3-eth/send-transaction! ...)`\n                and contains the from address. If the passphrase can be\n                used to decrypt the private key belonging to tx.from the\n                transaction is verified, signed and send onto the network.\n                The account is not unlocked globally in the node and cannot\n                be used in other RPC calls.\n  passphrase  - passphrase\n  callback    - callback with error and result as parameters\n\n  Example:\n  user> `(send-transaction web3-instance\n           {:from \\\"0x...\\\"\n            :to   \\\"0x\\\"}\n          \\\"password\\\"\n         callback)`\"\n  [web3 & args]\n  (js-apply (get-prs web3) \"sendTransaction\" args))\n\n\n(defn sign\n  \"Signs data using a specific account.\n\n  Note: Sending your account password over an unsecured HTTP RPC connection is\n  highly unsecure.\n\n  Parameters:\n  web3     - web3 instance\n  String   - Data to sign. If String it will be converted using\n             web3.utils.utf8ToHex.\n  String   - Address to sign data with.\n  String   - The password of the account to sign data with.\n  Function - (optional) Optional callback, returns an error object as first\n                        parameter and the result as second.\n\n  Returns:\n  Promise returns String - The signature.\"\n  [web3 & args]\n  (js-apply (get-prs web3) \"sign\" args))\n"]}