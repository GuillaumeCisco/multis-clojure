{"version":3,"sources":["cljs_web3/db.cljs"],"mappings":"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","names":["cljs-web3.db/get-db","web3","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","cljs-web3.db/put-string!","p__41720","vec__41740","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq41710","G__41711","cljs.core/first","cljs.core/next","self__4776__auto__","db","key","value","cb","args","cljs_web3.utils.js_apply.cljs$core$IFn$_invoke$arity$3","cljs-web3.db/get-string","p__41750","vec__41751","seq41747","G__41748","cljs-web3.db/put-hex!","p__41822","vec__41824","seq41811","G__41812","cljs-web3.db/get-hex","p__41857","vec__41859","seq41841","G__41842"],"sourcesContent":["(ns cljs-web3.db\n  \"Functions on LevelDB.\n\n  A fast key-value storage library that provides an ordered mapping from string\n  keys to string values.\"\n  (:require [cljs-web3.utils :as u :refer [js-apply]]))\n\n\n(defn get-db\n  \"Gets leveldb object from web3-instance.\n\n  Parameter:\n  web3 - web3 instance\"\n  [web3]\n  (aget web3 \"db\"))\n\n\n(defn put-string!\n  \"This method should be called, when we want to store a string in the local\n  leveldb database.\n\n  Parameters:\n  web3 - web3 instance\n  args:\n    db    - The database (string) to store to.\n    key   - The name (string) of the store.\n    value - The string value to store.\n\n  Returns true if successful, otherwise false.\"\n  [web3 & [db key value cb :as args]]\n  (js-apply (get-db web3) \"putString\" args))\n\n\n(defn get-string\n  \"This method should be called, when we want to get string from the local\n  leveldb database.\n\n  Parameters:\n  db  - The database (string) name to retrieve from.\n  key - The name (string) of the store.\n\n  Returns the stored value string.\"\n  [web3 & [db key :as args]]\n  (js-apply (get-db web3) \"getString\" args))\n\n\n(defn put-hex!\n  \"This method should be called, when we want to store binary data in HEX form\n  in the local leveldb database.\n\n  Parameters:\n  db    - The database (string) to store to.\n  key   - The name (string) of the store.\n  value - The HEX string to store.\n\n  Returns true if successful, otherwise false.\"\n  [web3 & [db key value :as args]]\n  (js-apply (get-db web3) \"putHex\" args))\n\n\n(defn get-hex\n  \"This method should be called, when we want to get a binary data in HEX form\n  from the local leveldb database.\n\n  Parameters:\n  db  - The database (string) to store to.\n  key - The name (string) of the store.\n\n  Returns the stored HEX value.\"\n  [web3 & [db key :as args]]\n  (js-apply (get-db web3) \"getHex\" args))\n"]}