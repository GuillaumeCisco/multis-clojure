{"version":3,"sources":["re_frame_forms/impl.cljs"],"mappings":"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","names":["re-frame-forms.impl/field-path","type","path","fexpr__41762","cljs.core/cons","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","re-frame-forms.impl/assoc-field","seq41763","G__41764","cljs.core/first","cljs.core/next","G__41765","self__4776__auto__","form","kvs","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__41766","vec__41768","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","value","cljs.core/assoc-in","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","G__41772","re-frame-forms.impl/path-value","js/Error","re_frame_forms.impl.path_value.cljs$core$IFn$_invoke$arity$4","default","map__41773","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","reagent.ratom/make-reaction","cljs.core/deref","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","re-frame-forms.impl/path-errors","map__41776","re-frame-forms.validation/field-errors","re-frame-forms.impl/validate-field","validator","val","re-frame-forms.validation/FieldValidator","this__4439__auto__","k__4440__auto__","this__4441__auto__","k41779","else__4442__auto__","G__41792","cljs.core/Keyword","coercer","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4458__auto__","f__4459__auto__","init__4460__auto__","ret__4461__auto__","p__41793","vec__41794","k__4462__auto__","v__4463__auto__","this__4453__auto__","writer__4454__auto__","opts__4455__auto__","pr-pair__4456__auto__","keyval__4457__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__41778","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4437__auto__","__meta","this__4434__auto__","__hash","this__4443__auto__","cljs.core/count","this__4435__auto__","h__4297__auto__","fexpr__41797","coll__4436__auto__","cljs.core/hash-unordered-coll","this41780","other41781","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4448__auto__","k__4449__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4446__auto__","k__4447__auto__","pred__41798","cljs.core/keyword-identical?","expr__41799","G__41801","G__41802","G__41803","G__41804","G__41805","G__41806","G__41807","G__41808","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4451__auto__","cljs.core/seq","cljs.core/MapEntry","this__4438__auto__","this__4444__auto__","entry__4445__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","re-frame-forms.impl/Field","this__4482__auto__","cljs.core/List","writer__4483__auto__","cljs.core/-write","G__41782","extmap__4478__auto__","G__41809","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","re-frame-forms.impl/->Field","re-frame-forms.impl/map->Field","_","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","re-frame-forms.validation/validate-field","this","str-value","or__4185__auto__","re-frame-forms.coerce/to-str","retain-str?","re-frame-forms.coerce/valid-str?","obj-value","re-frame-forms.coerce/from-str","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/empty?","cljs.core/nil?","error","cljs.core/not","form-touched","re-frame-forms.protocols/touched?","path-touched","G__41815","re-frame-forms.impl/validate-form","args-arr__4810__auto__","argseq__4811__auto__","seq41811","G__41812","G__41813","G__41814","f","args","re_frame_forms.impl.validate_form.cljs$core$IFn$_invoke$arity$variadic","new-value","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","re-frame-forms.validation/validate-form","re-frame-forms.impl/validation-in-progress?","form-value","cljs.core/vals","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/true?","k41817","G__41821","p__41822","vec__41823","G__41816","fexpr__41826","this41818","other41819","pred__41827","expr__41828","G__41830","G__41831","G__41832","G__41833","re-frame-forms.impl/Form","G__41820","G__41834","re-frame-forms.impl/->Form","re-frame-forms.impl/map->Form","o","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","a","b","xs","cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic","cljs.core/swap!","cljs.core/assoc","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","and__4174__auto__","cljs.core/identity","re-frame-forms.validation/valid?","re-frame-forms.impl/make-field","re-frame-forms.impl/make-form","reagent.core.atom.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns re-frame-forms.impl\n  (:require\n    [re-frame-forms.coerce :as coerce]\n    [re-frame-forms.protocols :as proto]\n    [re-frame-forms.validation :as validation]\n    [reagent.core :as reagent]\n    [reagent.ratom :refer-macros [reaction]]))\n\n\n(defn- field-path [type path]\n  (if (#{::value ::original} type)\n    (cons type path)\n    [type path]))\n\n(defn- assoc-field [form path & kvs]\n  (reduce (fn [form [type value]]\n            (assoc-in form (field-path type path) value))\n          form\n          (partition 2 kvs)))\n\n(defn- path-value\n  ([form type path]\n   (path-value form type path nil))\n  ([form type path default]\n   (let [{:keys [value]} form]\n     (reaction (get-in @value (field-path type path) default)))))\n\n(defn- path-errors [form path]\n  (let [{:keys [value]} form]\n    (reaction (validation/field-errors (::validator-errors @value) path))))\n\n(defn- validate-field [validator val]\n  (if (instance? validation/FieldValidator validator)\n    (validation/validate-field validator val)\n    []))\n\n(defrecord Field [form coercer validator path]\n  proto/Value\n  (value [_ default]\n    (path-value form ::value path default))\n  (set-value! [_ val]\n    (swap! form assoc-field path\n           ::field-errors (validation/validate-field validator val)\n           ::coercion-error false\n           ::value val\n           ::tmp nil\n           ::field-touched true))\n\n  proto/ResetValue\n  (original-value [_]\n    @(path-value form ::original path nil))\n  (reset-value! [this]\n    (swap! form assoc-field path\n           ::field-errors []\n           ::coercion-error false\n           ::value (proto/original-value this)\n           ::persistent-error nil\n           ::delayed-validation false\n           ::tmp nil\n           ::field-touched false))\n\n  proto/CoercedValue\n  (str-value [this]\n    (reaction\n      (let [str-value @(path-value form ::tmp path nil)\n            value     @(proto/value this nil)]\n        (or str-value (coerce/to-str coercer value)))))\n  (set-str-value! [this val retain-str?]\n    (if (coerce/valid-str? coercer val)\n      (let [obj-value (->> (coerce/from-str coercer val)\n                           (coerce/to-str coercer)\n                           (coerce/from-str coercer))]\n        (swap! form assoc-field path\n               ::field-errors (validation/validate-field validator obj-value)\n               ::coercion-error false\n               ::value obj-value\n               ::tmp (when retain-str? val)\n               ::field-touched true))\n      (swap! form assoc-field path\n             ::field-errors (validate-field coercer val)\n             ::coercion-error true\n             ::value nil\n             ::tmp val\n             ::field-touched true)))\n\n  proto/ErrorContainer\n  (errors [_]\n    (reaction (->> (concat @(path-value form ::field-errors path nil)\n                           @(path-errors form path)\n                           [@(path-value form ::persistent-error path nil)])\n                   (remove empty?)\n                   (remove nil?))))\n\n  proto/PersistentError\n  (set-error! [_ error]\n    (swap! form assoc-field path ::persistent-error error))\n\n  proto/Validatable\n  (valid? [this]\n    (reaction (and (not @(path-value form ::coercion-error path false))\n                   (empty? @(proto/errors this)))))\n\n  proto/Touchable\n  (touch! [_]\n    (swap! form assoc-field path\n           ::field-touched true))\n  (touched? [_]\n    (reaction\n      (let [form-touched @(proto/touched? form)\n            path-touched @(path-value form ::field-touched path false)]\n        (or form-touched path-touched))))\n\n  proto/DelayedValidation\n  (start-validation! [_]\n    (swap! form assoc-field path ::delayed-validation true))\n\n  (mark-ok! [_]\n    (swap! form assoc-field path\n           ::persistent-error nil\n           ::delayed-validation false))\n  (mark-error! [_ error]\n    (swap! form assoc-field path\n           ::persistent-error error\n           ::delayed-validation false))\n\n  proto/DelayValidationContainer\n  (validation-in-progress? [_]\n    (reaction @(path-value form ::delayed-validation path false))))\n\n(defn- validate-form\n  ([validator f]\n   (fn [value & args]\n     (validate-form value validator f args)))\n  ([value validator f & args]\n   (let [new-value (apply f value args)]\n     (-> new-value\n         (assoc ::validator-errors (validation/validate-form validator (::value new-value)))))))\n\n(defn- validation-in-progress? [form-value]\n  (->> (::delayed-validation form-value {})\n       vals\n       (filter true?)\n       not-empty)\n  )\n\n(defrecord Form [value validator]\n  ISwap\n  (-swap! [o f]\n    (swap! value validate-form validator f))\n  (-swap! [o f a]\n    (swap! value validate-form validator f a))\n  (-swap! [o f a b]\n    (swap! value validate-form validator f a b))\n  (-swap! [o f a b xs]\n    (apply swap! value validate-form validator f a b xs))\n\n  proto/Value\n  (value [_ default]\n    (reaction (get @value ::value default)))\n  (set-value! [this val]\n    (swap! this\n           validate-form assoc ::value val))\n\n  proto/ResetValue\n  (original-value [_]\n    (get @value ::original))\n  (reset-value! [this]\n    (swap! this (fn [value]\n                   {::value    (::original value)\n                    ::original (::original value)})))\n\n  proto/Validatable\n  (valid? [_]\n    (reaction (and\n                (->> (::coercion-error @value)\n                     vals\n                     (filter identity)\n                     empty?)\n                (->> (concat\n                       (::field-errors @value)\n                       (::persistent-error @value))\n                     vals\n                     (remove empty?)\n                     empty?)\n                (validation/valid? (::validator-errors @value))\n                (not (validation-in-progress? @value)))))\n\n  proto/Touchable\n  (touch! [this]\n    (swap! this assoc ::form-touched true))\n  (touched? [_]\n    (reaction (::form-touched @value false)))\n\n  proto/DelayValidationContainer\n  (validation-in-progress? [_]\n    (reaction (validation-in-progress? @value))))\n\n(defn make-field [form path coercer validator]\n  (->Field form coercer validator path))\n\n(defn make-form [value validator]\n  (->Form (reagent/atom {::value    value\n                         ::original value})\n          validator))"]}