{"version":3,"sources":["cljs_web3/evm.cljs"],"mappings":"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","names":["cljs-web3.evm/send-sync-fn","web3","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.core/js-invoke","cljs-web3.evm/send-async-fn","cljs-web3.evm/increase-time-jsonrpc","cljs.core/clj->js","js/Date","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","cljs-web3.evm/increase-time!","p__41719","vec__41725","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq41712","G__41713","cljs.core/first","cljs.core/next","G__41714","self__4776__auto__","callback","cljs.core/fn?","G__41731","G__41732","fexpr__41730","cljs-web3.utils/callback-js->clj","G__41733","cljs-web3.utils/js->cljkk","G__41735","fexpr__41734","cljs-web3.evm/mine-jsonrpc","cljs-web3.evm/mine!","p__41749","vec__41761","seq41745","G__41746","G__41767","G__41768","fexpr__41766","G__41770","G__41772","fexpr__41771","cljs-web3.evm/revert-jsonrpc","cljs-web3.evm/revert!","p__41797","vec__41798","seq41794","G__41795","G__41796","G__41802","G__41803","fexpr__41801","G__41805","G__41807","fexpr__41806","cljs-web3.evm/snapshot-jsonrpc","cljs-web3.evm/snapshot!","p__41828","vec__41829","seq41819","G__41820","G__41833","G__41834","fexpr__41832","G__41835","G__41837","fexpr__41836"],"sourcesContent":["(ns cljs-web3.evm\n  \"Functions that can be used to control testrpc behaviour. Can ONLY (!) be used\n  with testrpc.\n\n  See https://github.com/ethereumjs/testrpc for more information.\"\n  (:require [cljs-web3.utils :refer [callback-js->clj js->cljkk]]))\n\n\n(defn send-sync-fn\n  \"Creates an fn that sends synchronous function to the currentProvider.\n\n  Parameter:\n  web3 - web3 instance\n\n  Example:\n  user> `(send-async-fn web3)`\n  #object...\"\n  [web3]\n  (fn [& args]\n    (apply js-invoke\n           (aget web3 \"currentProvider\")\n           \"send\" args)))\n\n(defn send-async-fn\n  \"Creates an fn that sends asynchronous function to the currentProvider.\n\n  Parameter:\n  web3 - web3 instance\n\n  Example:\n  user> `(send-async-fn web3)`\n  #object...\"\n  [web3]\n  (fn [& args]\n    (apply js-invoke\n           (aget web3 \"currentProvider\")\n           \"sendAsync\" args)))\n\n(defn- increase-time-jsonrpc [args]\n  (clj->js {:jsonrpc \"2.0\"\n            :method \"evm_increaseTime\"\n            :params args\n            :id (.getTime (js/Date.))}))\n\n(defn increase-time!\n  \"Jump forward in time in the EVM.\n\n  Parameters:\n  web3     - web3 instance\n  args     - The amount of time to increase in seconds.\n  callback - callback with two parameters, error and result.\n\n  Returns the total time adjustment, in seconds.\n\n  Example:\n  user> `(web3-evm/increase-time! web3 [1000] callback)`\"\n  [web3 args & [callback]]\n  (if (fn? callback)\n    ((send-async-fn web3)\n      (increase-time-jsonrpc args)\n      (callback-js->clj callback))\n    (js->cljkk ((send-sync-fn web3) (increase-time-jsonrpc args)))))\n\n\n\n(defn- mine-jsonrpc []\n  (clj->js {:jsonrpc \"2.0\"\n            :method \"evm_mine\"\n            :params []\n            :id (.getTime (js/Date.))}))\n\n(defn mine!\n  \"Force a block to be mined. Mines a block independent of\n  whether or not mining is started or stopped.\n\n  Parameters:\n  web3     - web3 instance\n  callback - callback with two parameters, error and result.\n\n  Example:\n  user> `(web3-evm/mine! web3 callback)`\"\n  [web3 & [callback]]\n  (if (fn? callback)\n    ((send-async-fn web3)\n      (mine-jsonrpc)\n      (callback-js->clj callback))\n    (js->cljkk ((send-sync-fn web3) (mine-jsonrpc)))))\n\n(defn- revert-jsonrpc [args]\n  (clj->js {:jsonrpc \"2.0\"\n            :method \"evm_revert\"\n            :params args\n            :id (.getTime (js/Date.))}))\n\n(defn revert!\n  \"Revert the state of the blockchain to a previous snapshot.\n\n  Takes a single\n  parameter, which is the snapshot id to revert to. If no snapshot id is passed\n  it will revert to the latest snapshot. Returns true.\n\n  Parameters:\n  web3     - web3 instance\n  args     - snapshot id to revert to, if no snapshot id is passed, it will\n             revert to the latest snapshot\n  callback - callback with two parameters, error and result.\n\n  Returns true.\n\n  Example:\n  user> `(web3-evm/revert! web3 0 callback)`\"\n  [web3 args & [callback]]\n  (if (fn? callback)\n    ((send-async-fn web3)\n      (revert-jsonrpc args)\n      (callback-js->clj callback))\n    (js->cljkk ((send-sync-fn web3) (revert-jsonrpc args)))))\n\n\n(defn- snapshot-jsonrpc []\n  (clj->js {:jsonrpc \"2.0\"\n            :method \"evm_snapshot\"\n            :params []\n            :id (.getTime (js/Date.))}))\n\n(defn snapshot!\n  \"Snapshot the state of the blockchain at the current block.\n\n  Parameters:\n  web3     - web3 instance\n  callback - callback with two parameters, error and result.\n\n  Returns the integer id of the snapshot created.\n\n  Example:\n  user> `(web3-evm/snapshot! web3 callback)`\n  0\"\n  [web3 & [callback]]\n  (if (fn? callback)\n    ((send-async-fn web3)\n      (snapshot-jsonrpc)\n      (callback-js->clj callback))\n    (js->cljkk ((send-sync-fn web3) (snapshot-jsonrpc)))))\n"]}