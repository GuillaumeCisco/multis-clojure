{
"version":3,
"file":"module$node_modules$ethers$utils$bytes.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/ethers/utils/bytes.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ethers$utils$bytes\"] = function(global,require,module,exports) {\n\"use strict\";\n/**\n *  Conversion Utilities\n *\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"./types\");\nvar errors = require(\"./errors\");\nexports.AddressZero = '0x0000000000000000000000000000000000000000';\nexports.HashZero = '0x0000000000000000000000000000000000000000000000000000000000000000';\nfunction isBigNumber(value) {\n    return (value instanceof types_1.BigNumber);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        var args = Array.prototype.slice.call(arguments);\n        return new Uint8Array(Array.prototype.slice.apply(array, args));\n    };\n    return array;\n}\nfunction isArrayish(value) {\n    if (!value || parseInt(String(value.length)) != value.length || typeof (value) === 'string') {\n        return false;\n    }\n    for (var i = 0; i < value.length; i++) {\n        var v = value[i];\n        if (v < 0 || v >= 256 || parseInt(String(v)) != v) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.isArrayish = isArrayish;\nfunction arrayify(value) {\n    if (value == null) {\n        errors.throwError('cannot convert null value to array', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n    }\n    if (isBigNumber(value)) {\n        value = value.toHexString();\n    }\n    if (typeof (value) === 'string') {\n        var match = value.match(/^(0x)?[0-9a-fA-F]*$/);\n        if (!match) {\n            errors.throwError('invalid hexidecimal string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n        }\n        if (match[1] !== '0x') {\n            errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n        }\n        value = value.substring(2);\n        if (value.length % 2) {\n            value = '0' + value;\n        }\n        var result = [];\n        for (var i = 0; i < value.length; i += 2) {\n            result.push(parseInt(value.substr(i, 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    else if (typeof (value) === 'string') {\n    }\n    if (isArrayish(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    errors.throwError('invalid arrayify value', null, { arg: 'value', value: value, type: typeof (value) });\n    return null;\n}\nexports.arrayify = arrayify;\nfunction concat(objects) {\n    var arrays = [];\n    var length = 0;\n    for (var i = 0; i < objects.length; i++) {\n        var object = arrayify(objects[i]);\n        arrays.push(object);\n        length += object.length;\n    }\n    var result = new Uint8Array(length);\n    var offset = 0;\n    for (var i = 0; i < arrays.length; i++) {\n        result.set(arrays[i], offset);\n        offset += arrays[i].length;\n    }\n    return addSlice(result);\n}\nexports.concat = concat;\nfunction stripZeros(value) {\n    var result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    var start = 0;\n    while (result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexports.stripZeros = stripZeros;\nfunction padZeros(value, length) {\n    value = arrayify(value);\n    if (length < value.length) {\n        throw new Error('cannot pad');\n    }\n    var result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexports.padZeros = padZeros;\nfunction isHexString(value, length) {\n    if (typeof (value) !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nexports.isHexString = isHexString;\nvar HexCharacters = '0123456789abcdef';\nfunction hexlify(value) {\n    if (isBigNumber(value)) {\n        return value.toHexString();\n    }\n    if (typeof (value) === 'number') {\n        if (value < 0) {\n            errors.throwError('cannot hexlify negative value', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n        }\n        var hex = '';\n        while (value) {\n            hex = HexCharacters[value & 0x0f] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = '0' + hex;\n            }\n            return '0x' + hex;\n        }\n        return '0x00';\n    }\n    if (typeof (value) === 'string') {\n        var match = value.match(/^(0x)?[0-9a-fA-F]*$/);\n        if (!match) {\n            errors.throwError('invalid hexidecimal string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n        }\n        if (match[1] !== '0x') {\n            errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n        }\n        if (value.length % 2) {\n            value = '0x0' + value.substring(2);\n        }\n        return value;\n    }\n    if (isArrayish(value)) {\n        var result = [];\n        for (var i = 0; i < value.length; i++) {\n            var v = value[i];\n            result.push(HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f]);\n        }\n        return '0x' + result.join('');\n    }\n    errors.throwError('invalid hexlify value', null, { arg: 'value', value: value });\n    return 'never';\n}\nexports.hexlify = hexlify;\nfunction hexDataLength(data) {\n    if (!isHexString(data) || (data.length % 2) !== 0) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexports.hexDataLength = hexDataLength;\nfunction hexDataSlice(data, offset, length) {\n    if (!isHexString(data)) {\n        errors.throwError('invalid hex data', errors.INVALID_ARGUMENT, { arg: 'value', value: data });\n    }\n    if ((data.length % 2) !== 0) {\n        errors.throwError('hex data length must be even', errors.INVALID_ARGUMENT, { arg: 'value', value: data });\n    }\n    offset = 2 + 2 * offset;\n    if (length != null) {\n        return '0x' + data.substring(offset, offset + 2 * length);\n    }\n    return '0x' + data.substring(offset);\n}\nexports.hexDataSlice = hexDataSlice;\nfunction hexStripZeros(value) {\n    if (!isHexString(value)) {\n        errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n    }\n    while (value.length > 3 && value.substring(0, 3) === '0x0') {\n        value = '0x' + value.substring(3);\n    }\n    return value;\n}\nexports.hexStripZeros = hexStripZeros;\nfunction hexZeroPad(value, length) {\n    if (!isHexString(value)) {\n        errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n    }\n    while (value.length < 2 * length + 2) {\n        value = '0x0' + value.substring(2);\n    }\n    return value;\n}\nexports.hexZeroPad = hexZeroPad;\nfunction isSignature(value) {\n    return (value && value.r != null && value.s != null);\n}\nfunction splitSignature(signature) {\n    var v = 0;\n    var r = '0x', s = '0x';\n    if (isSignature(signature)) {\n        if (signature.v == null && signature.recoveryParam == null) {\n            errors.throwError('at least on of recoveryParam or v must be specified', errors.INVALID_ARGUMENT, { argument: 'signature', value: signature });\n        }\n        r = hexZeroPad(signature.r, 32);\n        s = hexZeroPad(signature.s, 32);\n        v = signature.v;\n        if (typeof (v) === 'string') {\n            v = parseInt(v, 16);\n        }\n        var recoveryParam = signature.recoveryParam;\n        if (recoveryParam == null && signature.v != null) {\n            recoveryParam = 1 - (v % 2);\n        }\n        v = 27 + recoveryParam;\n    }\n    else {\n        var bytes = arrayify(signature);\n        if (bytes.length !== 65) {\n            throw new Error('invalid signature');\n        }\n        r = hexlify(bytes.slice(0, 32));\n        s = hexlify(bytes.slice(32, 64));\n        v = bytes[64];\n        if (v !== 27 && v !== 28) {\n            v = 27 + (v % 2);\n        }\n    }\n    return {\n        r: r,\n        s: s,\n        recoveryParam: (v - 27),\n        v: v\n    };\n}\nexports.splitSignature = splitSignature;\nfunction joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? '0x1c' : '0x1b')\n    ]));\n}\nexports.joinSignature = joinSignature;\n\n};"],
"names":["shadow$provide","global","require","module","exports","addSlice","array","slice","array.slice","args","Array","prototype","call","arguments","Uint8Array","apply","isArrayish","value","parseInt","String","length","i","v","arrayify","errors","throwError","INVALID_ARGUMENT","arg","types_1","BigNumber","toHexString","match","substring","result","push","substr","type","concat","objects","arrays","object","offset","set","isHexString","hexlify","hex","HexCharacters","Math","floor","join","hexZeroPad","splitSignature","signature","r","s","recoveryParam","argument","bytes","Error","Object","defineProperty","AddressZero","HashZero","stripZeros","start","padZeros","hexDataLength","data","hexDataSlice","hexStripZeros","joinSignature"]
}
