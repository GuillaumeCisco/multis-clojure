{"version":3,"sources":["re_frame_forms/core.cljs"],"mappings":"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","names":["var_args","G__41839","re-frame-forms.core/value","js/Error","form-or-field","re_frame_forms.core.value.cljs$core$IFn$_invoke$arity$2","default","re-frame-forms.protocols/value","re-frame-forms.core/set-value!","value","re-frame-forms.protocols/set-value!","re-frame-forms.core/set-error!","field","error","re-frame-forms.protocols/set-error!","re-frame-forms.core/clear-error!","re-frame-forms.core/start-validation!","this","re-frame-forms.protocols/start-validation!","re-frame-forms.core/validation-in-progress?","re-frame-forms.protocols/validation-in-progress?","re-frame-forms.core/mark-ok!","re-frame-forms.protocols/mark-ok!","re-frame-forms.core/mark-error!","re-frame-forms.protocols/mark-error!","re-frame-forms.core/original-value","re-frame-forms.protocols/original-value","re-frame-forms.core/reset-value!","re-frame-forms.protocols/reset-value!","re-frame-forms.core/str-value","re-frame-forms.protocols/str-value","G__41842","re-frame-forms.core/set-str-value!","re-frame-forms.protocols/set-str-value!","retain-str?","re-frame-forms.core/errors","re-frame-forms.protocols/errors","re-frame-forms.core/valid?","re-frame-forms.protocols/valid?","re-frame-forms.core/touch!","re-frame-forms.protocols/touch!","re-frame-forms.core/touched?","re-frame-forms.protocols/touched?","G__41845","re-frame-forms.core/make-field","form","path","re_frame_forms.core.make_field.cljs$core$IFn$_invoke$arity$4","type","validator","re-frame-forms.impl/make-field","G__41847","re-frame-forms.core/make-form","re_frame_forms.core.make_form.cljs$core$IFn$_invoke$arity$2","re-frame-forms.impl/make-form","G__41850","re-frame-forms.core/handle-str-value","p1__41848#","re_frame_forms.core.handle_str_value.cljs$core$IFn$_invoke$arity$2","re_frame_forms.core.set_str_value_BANG_.cljs$core$IFn$_invoke$arity$3","p1__41851#","re-frame-forms.core/handle-checked-value","re-frame-forms.core/handle-valid-form","callback","e","cljs.core/deref","G__41852","re_frame_forms.core.value.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns re-frame-forms.core\n  (:require\n    [re-frame-forms.protocols :as proto]\n    [re-frame-forms.impl :as impl])\n  (:require-macros\n    [reagent.ratom :refer [reaction]]))\n\n\n(defn value\n  \"Get reaction for current value\"\n  ([form-or-field]\n   (value form-or-field nil))\n  ([form-or-field default]\n   (proto/value form-or-field default)))\n\n(defn set-value!\n  \"Set current value\"\n  [form-or-field value]\n  (proto/set-value! form-or-field value))\n\n\n(defn set-error!\n  \"Set 1 error for the field. Error can be cleared by calling clear-error!\"\n  [field error]\n  (proto/set-error! field error))\n\n(defn clear-error!\n  \"Clear field error\"\n  [field]\n  (set-error! field nil))\n\n(defn start-validation! [this]\n  (proto/start-validation! this))\n(defn validation-in-progress? [this]\n  (proto/validation-in-progress? this))\n(defn mark-ok! [this]\n  (proto/mark-ok! this))\n(defn mark-error! [this error]\n  (proto/mark-error! this error))\n\n\n(defn original-value\n  \"Get original value of the form/field\"\n  [form-or-field]\n  (proto/original-value form-or-field))\n(defn reset-value!\n  \"Reset form/field to the original value, clear errors\"\n  [form-or-field]\n  (proto/reset-value! form-or-field))\n\n\n(defn str-value\n  \"Get reaction for current value converted to string\"\n  [field]\n  (proto/str-value field))\n(defn set-str-value!\n  \"Set current value by converting val from string\"\n  ([field value]\n   (proto/set-str-value! field value false))\n  ([field value retain-str?]\n   (proto/set-str-value! field value retain-str?)))\n\n\n(defn errors\n  \"Get reaction for current field/form errors\"\n  [field]\n  (proto/errors field))\n\n\n(defn valid?\n  \"Get reaction for current validation status of the form/field\"\n  [form-or-field]\n  (proto/valid? form-or-field))\n\n\n(defn touch!\n  \"Touch the field/form\"\n  [form-or-field]\n  (proto/touch! form-or-field))\n(defn touched?\n  \"Get reaction with current touch status\"\n  [form-or-field]\n  (proto/touched? form-or-field))\n\n(defn make-field\n  ([form path]\n   (make-field form path nil nil))\n  ([form path type]\n   (make-field form path type nil))\n  ([form path type validator]\n   (impl/make-field form path type validator)))\n\n(defn make-form\n  ([value]\n   (make-form value nil))\n  ([value validator]\n   (impl/make-form value validator)))\n\n(defn handle-str-value\n  ([field]\n    (handle-str-value field false))\n  ([field retain-str?]\n   #(set-str-value! field (-> % .-target .-value) retain-str?)))\n\n(defn handle-checked-value [field]\n  #(set-value! field (-> % .-target .-checked)))\n\n(defn handle-valid-form [form callback]\n  (fn [e]\n    (touch! form)\n    (when @(valid? form)\n      (callback @(value form)))\n    (.preventDefault e)))"]}