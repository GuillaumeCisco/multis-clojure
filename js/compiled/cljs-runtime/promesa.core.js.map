{"version":3,"sources":["promesa/core.cljc"],"mappings":"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","names":["promesa.core/resolved","v","promesa.impl/resolved","promesa.core/rejected","promesa.impl/rejected","promesa.core/deferred","promesa.impl/deferred","var_args","G__41804","promesa.core/promise","js/Error","promesa.protocols/-promise","executor","promesa.protocols._map.cljs$core$IFn$_invoke$arity$3","cljs.core/identity","G__41810","promesa.core/create","f","d","e41811","G__41812","p1__41805#","G__41813","p1__41806#","promesa.protocols/-resolve!","promesa.protocols/-reject!","e","promesa.exec.run_BANG_.cljs$core$IFn$_invoke$arity$2","e41814","G__41815","p1__41807#","G__41816","p1__41808#","promesa.core/promise?","promesa.impl/*default-promise*","promesa.core/deferred?","promesa.core/thenable?","cljs.core/object?","cljs.core/fn?","promesa.core/resolved?","p","promesa.protocols/-resolved?","promesa.core/rejected?","promesa.protocols/-rejected?","promesa.core/pending?","promesa.protocols/-pending?","promesa.core/extract","promesa.protocols/-extract","promesa.core/done?","cljs.core/complement","promesa.core/wrap","G__41818","promesa.core/then","promesa.protocols._then.cljs$core$IFn$_invoke$arity$2","promesa.protocols._then.cljs$core$IFn$_invoke$arity$3","G__41820","promesa.core/bind","G__41822","promesa.core/then'","promesa.protocols._map.cljs$core$IFn$_invoke$arity$2","G__41824","promesa.core/map","G__41826","promesa.core/mapcat","promesa.protocols._bind.cljs$core$IFn$_invoke$arity$2","promesa.protocols._bind.cljs$core$IFn$_invoke$arity$3","G__41833","promesa.core/chain","args-arr__4810__auto__","len__4789__auto__","i__4790__auto__","argseq__4811__auto__","cljs.core/IndexedSeq","seq41830","G__41831","cljs.core/first","cljs.core/next","G__41832","self__4776__auto__","promesa.core.then.cljs$core$IFn$_invoke$arity$2","fs","p1__41827#","p2__41828#","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/cons","G__41838","promesa.core/chain'","seq41835","G__41836","G__41837","promesa.core.then_SINGLEQUOTE_.cljs$core$IFn$_invoke$arity$2","promesa.protocols/-map","G__41840","promesa.core/handle","promesa.protocols._handle.cljs$core$IFn$_invoke$arity$2","promesa.protocols._handle.cljs$core$IFn$_invoke$arity$3","G__41842","promesa.core/finally","promesa.protocols._finally.cljs$core$IFn$_invoke$arity$2","promesa.protocols._finally.cljs$core$IFn$_invoke$arity$3","G__41845","promesa.core/catch","promesa.protocols._thenErr.cljs$core$IFn$_invoke$arity$2","pred-or-type","accept?","p1__41843#","cljs.core/ifn?","G__41848","promesa.core/catch'","promesa.protocols._mapErr.cljs$core$IFn$_invoke$arity$2","p1__41846#","G__41850","promesa.core/error","promesa.core.catch$.cljs$core$IFn$_invoke$arity$2","type","promesa.core.catch$.cljs$core$IFn$_invoke$arity$3","promesa.core/err","promesa.core/all","promises","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","cljs.core/vec","promesa.core/race","cljs.core.map.cljs$core$IFn$_invoke$arity$2","G__41852","promesa.core/any","promesa.core.any.cljs$core$IFn$_invoke$arity$2","default","state","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/count","promesa.core.create.cljs$core$IFn$_invoke$arity$1","resolve","reject","seq__41853","cljs.core/seq","chunk__41854","count__41855","i__41856","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","promesa.core.promise.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core/dec","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","map__41863","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__41866","resolved","counter","rejections","cljs.core/not","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__41865","G__41868","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","G__41872","promesa.core/run!","coll","promesa.core.run_BANG_.cljs$core$IFn$_invoke$arity$3","promesa.exec/current-thread-executor","p1__41869#","p2__41870#","_","promesa.core.promise.cljs$core$IFn$_invoke$arity$2","promesa.core/cancel!","promesa.protocols/-cancel!","promesa.core/cancelled?","promesa.protocols/-cancelled?","G__41874","promesa.core/resolve!","o","promesa.core/reject!","promesa.core/promisify","callable","args","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","e41875","promesa.core/TimeoutException","message","it","goog/inherits","G__41877","promesa.core/timeout","t","promesa.core.timeout.cljs$core$IFn$_invoke$arity$4","promesa.exec/default-scheduler","scheduler","timeout","promesa.exec.schedule_BANG_.cljs$core$IFn$_invoke$arity$3","promesa.core.resolve_BANG_.cljs$core$IFn$_invoke$arity$2","G__41879","promesa.core/delay","promesa.core.delay.cljs$core$IFn$_invoke$arity$3","js/promesa","js/promesa.core","js/promesa.core.INTERNAL_LOOP_FN_NAME","promesa.core/INTERNAL_LOOP_FN_NAME","cljs.core.gensym.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":[";; Copyright (c) 2015-2019 Andrey Antukh <niwi@niwi.nz>\n;; All rights reserved.\n;;\n;; Redistribution and use in source and binary forms, with or without\n;; modification, are permitted provided that the following conditions\n;; are met:\n;;\n;; 1. Redistributions of source code must retain the above copyright\n;;    notice, this list of conditions and the following disclaimer.\n;; 2. Redistributions in binary form must reproduce the above copyright\n;;    notice, this list of conditions and the following disclaimer in the\n;;    documentation and/or other materials provided with the distribution.\n;;\n;; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n;; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n;; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n;; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n;; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n;; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n;; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n;; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n;; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n(ns promesa.core\n  (:refer-clojure :exclude [delay spread promise\n                            await map mapcat run!\n                            future let loop recur])\n  (:require\n   [promesa.protocols :as pt]\n   [clojure.core :as c]\n   [promesa.exec :as exec]\n   [promesa.impl :as impl])\n  #?(:cljs (:require-macros [promesa.core]))\n  #?(:clj\n     (:import\n      java.util.concurrent.CompletableFuture\n      java.util.concurrent.CompletionStage\n      java.util.concurrent.TimeoutException)))\n\n;; --- Promise\n\n(defn resolved\n  \"Return a resolved promise with provided value.\"\n  [v]\n  (impl/resolved v))\n\n(defn rejected\n  \"Return a rejected promise with provided reason.\"\n  [v]\n  (impl/rejected v))\n\n(defn deferred\n  \"Creates an empty promise instance.\"\n  []\n  (impl/deferred))\n\n(defn promise\n  \"The coerce based promise constructor. Creates a appropriate promise\n  instance depending on the provided value.\n\n  If an executor is provided, it will be used to resolve this\n  promise.\"\n  ([v] (pt/-promise v))\n  ([v executor]\n   (pt/-map v identity executor)))\n\n(defn create\n  \"Create a promise instance from a factory function. If an executor is\n  provided, the factory will be executed in the provided executor.\n\n  A factory function looks like `(fn [resolve reject] (resolve 1))`.\"\n  ([f]\n   (c/let [d (impl/deferred)]\n     (try\n       (f #(pt/-resolve! d %)\n          #(pt/-reject! d %))\n       (catch #?(:clj Exception :cljs :default) e\n         (pt/-reject! d e)))\n     d))\n  ([f executor]\n   (c/let [d (impl/deferred)]\n     (exec/run! executor (fn []\n                           (try\n                             (f #(pt/-resolve! d %)\n                                #(pt/-reject! d %))\n                             (catch #?(:clj Exception :cljs :default) e\n                               (pt/-reject! d e)))))\n     d)))\n\n(defn promise?\n  \"Return true if `v` is a promise instance.\"\n  [v]\n  #?(:clj (instance? CompletionStage v)\n     :cljs (instance? impl/*default-promise* v)))\n\n(defn deferred?\n  \"Return true if `v` is a promise instance (alias to `promise?`.\"\n  [v]\n  #?(:clj (instance? CompletionStage v)\n     :cljs (instance? impl/*default-promise* v)))\n\n#?(:cljs\n   (defn thenable?\n     \"Returns true if `v` is a promise like object.\"\n     [v]\n     (and (object? v) (fn? (unchecked-get v \"then\")))))\n\n;; Predicates\n\n(defn resolved?\n  \"Returns true if promise `p` is already fulfilled.\"\n  [p]\n  (pt/-resolved? p))\n\n(defn rejected?\n  \"Returns true if promise `p` is already rejected.\"\n  [p]\n  (pt/-rejected? p))\n\n(defn pending?\n  \"Returns true if promise `p` is stil pending.\"\n  [p]\n  (pt/-pending? p))\n\n(defn extract\n  \"Returns the current promise value.\"\n  [p]\n  (pt/-extract p))\n\n(def done?\n  \"Returns true if promise `p` is already done.\"\n  (complement pending?))\n\n;; Chaining\n\n(defn wrap\n  [v]\n  (if (promise? v)\n    v\n    (pt/-promise v)))\n\n(defn then\n  \"Chains a computation `f` (function) to be executed when the promise\n  `p` is successfully resolved.\n\n  The computation will be executed in the calling thread by default;\n  you also can provide a custom executor.\n\n  If the function `f` returns a promise instance, it will be\n  automatically unwrapped.\"\n  ([p f]\n   (pt/-then p f))\n  ([p f executor]\n   (pt/-then p f executor)))\n\n(defn bind\n  \"A convenient alias for `then`.\"\n  ([p f]\n   (pt/-then p f))\n  ([p f executor]\n   (pt/-then p f executor)))\n\n(defn then'\n  \"Chains a computation `f` (function) to be executed when the promise\n  `p` is successfully resolved.\n\n  The computation will be executed in the calling thread by default;\n  you also can provide a custom executor.\n\n  Don't perform flatten on the result.\"\n  ([p f] (pt/-map p f))\n  ([p f executor] (pt/-map p f executor)))\n\n(defn map\n  \"Chains a computation `f` (function) to be executed when the promise\n  `p` is successfully resolved.\n\n  Unlike `then` this does not performs automatic promise flattening.\n  This is designed to be used with `->>`.\"\n  ([f p] (pt/-map p f))\n  ([executor f p] (pt/-map p f executor)))\n\n(defn mapcat\n  \"Chains a computation `f` (function) to be executed when the promise\n  `p` is successfully resolved. always expecting that `f` returns a\n  promise that will be automatically unwrapped.\n\n  This is just a stricter version of `then` with reversed arguments in\n  the same way as `map`.\n\n  This is designed to be used with `->>`.\"\n  ([f p] (pt/-bind p f))\n  ([executor f p] (pt/-bind p f executor)))\n\n(defn chain\n  \"Chain variable number of computations to be executed\n  serially. Analogous to `then` that accepts variable number of\n  functions.\"\n  ([p f] (then p f))\n  ([p f & fs] (reduce #(then %1 %2) p (cons f fs))))\n\n(defn chain'\n  \"Chain variable number of computations to be executed serially. Unlike\n  `chain` does not flattens the return value of each step (probably\n  this is more performant than `chain`).\"\n  ([p f] (then' p f))\n  ([p f & fs] (reduce pt/-map p (cons f fs))))\n\n(defn handle\n  \"Executes `f` when the promise `p` is resolved or is rejected. Returns\n  a promise resolved with the return value of `f` function.\"\n  ([p f] (pt/-handle p f))\n  ([p f executor] (pt/-handle p f executor)))\n\n(defn finally\n  \"Attach a potentially side-effectful handler to promise that will be\n  executed independently if promise is resolved or rejected.\n\n  Returns the original promise and the return value of `f` function is\n  ignored.\"\n  ([p f] (pt/-finally p f))\n  ([p f executor] (pt/-finally p f executor)))\n\n(defn catch\n  \"Executes `f` when the promise `p` is rejected. Returns a promise\n  resolved with the return value of `f` function handler.\"\n  ([p f]\n   (pt/-thenErr p f))\n  ([p pred-or-type f]\n   (c/let [accept? (if (ifn? pred-or-type)\n                     pred-or-type\n                     #(instance? pred-or-type %))]\n     (pt/-thenErr p (fn [e]\n                      (if (accept? e)\n                        (f e)\n                        (impl/rejected e)))))))\n\n(defn catch'\n  \"Executes `f` when the promise `p` is rejected. Returns a promise\n  resolved with the return value of `f` function handler.\"\n  ([p f]\n   (pt/-mapErr p f))\n  ([p pred-or-type f]\n   (c/let [accept? (if (ifn? pred-or-type)\n                     pred-or-type\n                     #(instance? pred-or-type %))]\n     (pt/-mapErr p (fn [e]\n                     (if (accept? e)\n                        (f e)\n                        (throw e)))))))\n\n(defn error\n  \"Same as `catch` but with parameters inverted.\"\n  ([f p] (catch p f))\n  ([f type p] (catch p type f)))\n\n(def err\n  \"A short alias for `error` function.\"\n  error)\n\n(defn all\n  \"Given an array of promises, return a promise\n  that is fulfilled  when all the items in the\n  array are fulfilled.\n\n  Example:\n\n  (-> (all [(promise :first-promise)\n            (promise :second-promise)]\n      (then (fn [[first-result second-result]]))\n       (println (str first-result \\\", \\\" second-result)\n\n  Will print out\n  :first-promise, :second-promise.\n\n  If at least one of the promises is rejected, the resulting promise will be\n  rejected.\"\n  [promises]\n  #?(:cljs (-> (.all impl/*default-promise* (into-array promises))\n               (then' vec))\n     :clj (c/let [promises (clojure.core/map pt/-promise promises)]\n            (then' (->> (into-array CompletableFuture promises)\n                        (CompletableFuture/allOf))\n                   (fn [_]\n                     (mapv pt/-extract promises))))))\n\n(defn race\n  [promises]\n  #?(:cljs (.race impl/*default-promise* (into-array (cljs.core/map pt/-promise promises)))\n     :clj (CompletableFuture/anyOf (->> (clojure.core/map pt/-promise promises)\n                                        (into-array CompletableFuture)))))\n\n(defn any\n  \"Given an array of promises, return a promise that is fulfilled when\n  first one item in the array is fulfilled.\"\n  ([promises]\n   (any promises ::default))\n  ([promises default]\n   (c/let [state (atom {:resolved false\n                      :counter (count promises)\n                      :rejections []})]\n     (create\n      (fn [resolve reject]\n        (doseq [p promises]\n          (-> (promise p)\n              (then (fn [v]\n                      (when-not (:resolved @state)\n                        (swap! state (fn [state]\n                                       (-> state\n                                           (assoc :resolved true)\n                                           (update :counter dec))))\n                        (resolve v))))\n              (catch (fn [e]\n                       (swap! state (fn [state]\n                                      (-> state\n                                          (update  :counter dec)\n                                          (update :rejections conj e))))\n                       (c/let [{:keys [resolved counter rejections]} @state]\n                         (when (and (not resolved) (= counter 0))\n                           (if (= default ::default)\n                             (reject (ex-info \"No promises resolved\"\n                                              {:rejections rejections}))\n                             (resolve default)))))))))))))\n\n(defn run!\n  \"A promise aware run! function.\"\n  ([f coll] (run! f coll exec/current-thread-executor))\n  ([f coll executor] (reduce #(then %1 (fn [_] (f %2))) (promise nil executor) coll)))\n\n;; Cancellation\n\n(defn cancel!\n  \"Cancel the promise.\"\n  [p]\n  (pt/-cancel! p)\n  p)\n\n(defn cancelled?\n  \"Return true if `v` is a cancelled promise.\"\n  [v]\n  (pt/-cancelled? v))\n\n;; Completable\n\n(defn resolve!\n  \"Resolve a completable promise with a value.\"\n  ([o] (pt/-resolve! o nil))\n  ([o v] (pt/-resolve! o v)))\n\n(defn reject!\n  \"Reject a completable promise with an error.\"\n  [p e]\n  (pt/-reject! p e))\n\n;; --- Utils\n\n(defn promisify\n  \"Given a function that accepts a callback as the last argument return other\n  function that returns a promise. Callback is expected to take single\n  parameter (result of a computation).\"\n  [callable]\n  (fn [& args]\n    (create (fn [resolve reject]\n               (c/let [args (-> (vec args) (conj resolve))]\n                 (try\n                   (apply callable args)\n                   (catch #?(:clj Throwable :cljs js/Error) e\n                     (reject e))))))))\n\n#?(:cljs\n   (defn ^{:jsdoc [\"@constructor\"]}\n     TimeoutException [message]\n     (this-as it\n       (.call js/Error it message {} nil)\n       it)))\n\n#?(:cljs (goog/inherits TimeoutException js/Error))\n\n(defn timeout\n  \"Returns a cancellable promise that will be fulfilled with this\n  promise's fulfillment value or rejection reason.  However, if this\n  promise is not fulfilled or rejected within `ms` milliseconds, the\n  returned promise is cancelled with a TimeoutError\"\n  ([p t] (timeout p t ::default exec/default-scheduler))\n  ([p t v] (timeout p t v exec/default-scheduler))\n  ([p t v scheduler]\n   (c/let [timeout (deferred)]\n     (exec/schedule! scheduler t #(if (= v ::default)\n                                    (reject! timeout (TimeoutException. \"Operation timed out.\"))\n                                    (resolve! timeout v)))\n     (race [p timeout]))))\n\n(defn delay\n  \"Given a timeout in miliseconds and optional\n  value, returns a promise that will fulfilled\n  with provided value (or nil) after the\n  time is reached.\"\n  ([t] (delay t nil exec/default-scheduler))\n  ([t v] (delay t v exec/default-scheduler))\n  ([t v scheduler]\n   (c/let [d (deferred)]\n     (exec/schedule! scheduler t #(resolve! d v))\n     d)))\n\n#?(:clj\n   (defmacro do!\n     \"Execute potentially side effectful code and return a promise\n     resolved to the last expression. Always awaiting the result of each\n     expression.\"\n     [& exprs]\n     `(pt/-bind nil (fn [_#]\n                      ~(condp = (count exprs)\n                         0 `(pt/-promise nil)\n                         1 `(pt/-promise ~(first exprs))\n                         (reduce (fn [acc e]\n                                   `(pt/-bind ~e (fn [_#] ~acc)))\n                                 `(pt/-promise ~(last exprs))\n                                 (reverse (butlast exprs))))))))\n\n#?(:clj\n   (defmacro let\n     \"A `let` alternative that always returns promise and waits for\n     all the promises on the bindings.\"\n     [bindings & body]\n     `(pt/-bind nil (fn [_#]\n                      ~(->> (reverse (partition 2 bindings))\n                            (reduce (fn [acc [l r]]\n                                      `(pt/-bind ~r (fn [~l] ~acc)))\n                                    `(do! ~@body)))))))\n\n#?(:clj (def #^{:macro true :doc \"A backward compatibility alias for `let`.\"}\n          alet #'let))\n\n\n#?(:clj\n   (defmacro plet\n     \"A parallel let; executes all the bindings in parallel and\n     when all bindings are resolved, executes the body.\"\n     [bindings & body]\n     `(pt/-bind nil (fn [_#]\n                      ~(c/let [bindings (partition 2 bindings)]\n                         `(-> (all ~(mapv second bindings))\n                              (then (fn [[~@(mapv first bindings)]]\n                                      (do! ~@body)))))))))\n\n#?(:clj\n   (defmacro future\n     \"Analogous to `clojure.core/future` that returns a promise instance\n     instead of the `Future`. Usefull for execute synchronous code in a\n     separate thread (also works in cljs).\"\n     [& body]\n     `(-> (exec/submit! (fn []\n                          (c/let [f# (fn [] ~@body)]\n                            (pt/-promise (f#)))))\n          (pt/-bind identity))))\n\n\n(defonce ^:private INTERNAL_LOOP_FN_NAME\n  (gensym 'internal-loop-fn-name))\n\n(defmacro loop\n  \"Analogous to `clojure.core/loop`.\"\n  [bindings & body]\n  (c/let [bindings (partition 2 2 bindings)\n          names (mapv first bindings)\n          fvals (mapv second bindings)\n          syms (mapv gensym names)]\n    `(do!\n      (letfn [(~INTERNAL_LOOP_FN_NAME [~@syms]\n               (-> (p/all [~@syms])\n                   (p/then (fn [[~@names]] (do! ~@body)))))]\n        (~INTERNAL_LOOP_FN_NAME ~@fvals)))))\n\n(defmacro recur\n  [& args]\n  `(~INTERNAL_LOOP_FN_NAME ~@args))\n"]}