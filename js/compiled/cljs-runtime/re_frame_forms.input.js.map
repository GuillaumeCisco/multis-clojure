{"version":3,"sources":["re_frame_forms/input.cljs"],"mappings":"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","names":["var_args","G__41855","re-frame-forms.input/radio","js/Error","field","value","re_frame_forms.input.radio.cljs$core$IFn$_invoke$arity$3","attrs","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","re_frame_forms.core.handle_str_value.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","re_frame_forms.core.value.cljs$core$IFn$_invoke$arity$1","G__41859","re-frame-forms.input/checkbox","re_frame_forms.input.checkbox.cljs$core$IFn$_invoke$arity$2","re-frame-forms.core/handle-checked-value","G__41867","re-frame-forms.input/input","re_frame_forms.input.input.cljs$core$IFn$_invoke$arity$2","re-frame-forms.core/str-value","re_frame_forms.core.handle_str_value.cljs$core$IFn$_invoke$arity$2","re-frame-forms.input/select","options","cljs.core.into.cljs$core$IFn$_invoke$arity$2","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","re-frame-forms.input/options","seq41872","self__4777__auto__","cljs.core/seq","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","p__41873","vec__41874","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","label"],"sourcesContent":["(ns re-frame-forms.input\n  (:require\n    [re-frame-forms.core :as form]))\n\n(defn radio\n  ([field value]\n   (radio field value {}))\n  ([field value attrs]\n   (fn [field value attrs]\n     [:input (merge attrs\n                    {:type      \"radio\"\n                     :value     value\n                     :on-change (form/handle-str-value field)\n                     :checked   (= @(form/value field) value)})])))\n\n(defn checkbox\n  ([field]\n   (checkbox field {}))\n  ([field attrs]\n   (fn [field attrs]\n     [:input (merge attrs\n                    {:type      \"checkbox\"\n                     :checked   @(form/value field)\n                     :on-change (form/handle-checked-value field)})])))\n\n(defn input\n  ([field]\n   (input field {:type \"text\"}))\n  ([field attrs]\n   (fn [field attrs]\n     [:input (merge attrs\n                    {:value     @(form/str-value field)\n                     :on-change (form/handle-str-value field true)\n                     :on-blur (form/handle-str-value field false)})])))\n\n\n(defn select\n  ([field attrs options]\n   (fn [field attrs options]\n     (into [:select\n            (merge attrs\n                   {:value     @(form/str-value field)\n                    :on-change (form/handle-str-value field)})]\n           options))))\n\n(defn options [& options]\n  (->> (partition 2 options)\n       (mapv (fn [[value label]]\n               ^{:key value}\n               [:option {:value value} label]))))"]}